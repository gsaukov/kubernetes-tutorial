1. install Minikube, kubectl will be auto installed.
2. Run docker minikube will auto discover hypervisor.
3. Run: minikube start (to update "minikube update-check")
4. install Helm.
5. Clone git repository with charts museum.
6. pull external chart dependencies: helm dependency update
7. Run run helm install <chart name> <path to chart>
8. use kubectl to track pod status
9. make sure that namespaces of tiller/HELM/k8s are correct.
                              export TILLER_NAMESPACE="dev-infra"
                              printenv TILLER_NAMESPACE

common commands:
kubectl cluster-info
helm install cache D:\work\cache-pod --debug --dry-run
helm install cache helmcharts\cache
helm upgrade cache helmcharts\cache
helm delete cache
helm status cache
kubectl describe pod cache-76557b9865-8g77p
kubectl get all
kubectl get pods
kubectl get pv
kubectl get pvc
kubectl get service
kubectl get ingress
kubectl logs my-pod
kubectl get deployment
kubectl exec -it pod-name printenv | grep DATABASE //prints environment variables and filters.

kubectl create -f path_to.yml //creates resource from file description
kubectl create deployment hello-cluster --image=k8s.gcr.io/echoserver:1.4 --port=8080 // creates new deployment
kubectl expose deployment hello-cluster --type=NodePort --port=8080 //Creates service. Open node port but check port frowarding via "kubectl get svc: hello-cluster NodePort 100.67.82.184 <none> 8080:31594/TCP
kubectl port-forward svc/postgres-db-postgresql 5888:5432 // Attach pods port 5432 to localhost 5888
kubectl rollout restart deployment my-deployment // restarts service.
kubectl set image deployment my-deployment k8s-demo=wardviaene/k8s-demo:2 //update the image
kubectl rollout undo deployment my-deployment // rollback the changes use --to-revision=6 to rollback to particular revision
kubectl rollout history deployment my-deployment // shows the history of deployments
kubectl scale deploy my-deployment --replicas=0  //turns off service.
kubectl get secret --namespace default postgres-db-postgresql -o jsonpath="{.data.postgresql-password}" | base64 --decode // get and decode secret for database
KUBE_EDITOR="nano" kubect edit deployment/pod/svc my-deployment //changes resources properties and spawns new resource with replace. Also uses nano editor

kubectl config set-context --current --namespace=mynamespace
kubectl get all --all-namespaces | grep myapp //search myapp across all namespaces and all object types(service/deployment/pod)
kubectl get ingress | grep "<service-name>.<namespace>.svc.cluster.local:<service-port>"

kubectl run -i --tty busybox --image=busybox --restart=Never -- sh // execute comands within the cluster

kubectl attach pod_name // attaches to running process so you can see console output

helm list --filter 'myapp'
helm list --namespace myapp
helm ls --all myapp
helm del myapp //delete and purge deployment
helm uninstall myapp // just uninstalls deployment.
helm install --name mychart . --namespace mynamespace --debug //install my chart from current folder to soecific namespace.
helm install --name mychart . --namespace mynamespace --debug --dry-run
helm ugrade ${helm-chart-name} --reset-values --install --namespace=dev --set imageTag=${IMAGE_TAG} //updats helm chart with a new image.
helm ugrade ${helm-chart-name} . --namespace=dev --debug --dry-run

to connect to service from outside of the cluster use nodePort service type. --kubectl describe svc serviceName //check the target IP.


helm install postgres-db bitnami/postgresql --debug --dry-run
kubectl port-forward service/postgres-db-postgresql --port=5432
