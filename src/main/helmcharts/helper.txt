1. install Minikube, kubectl will be auto installed.
2. Run docker minikube will auto discover hypervisor.
3. Run: minikube start
4. install Helm.
5. Clone git repository with charts museum.
6. Run run helm install <chart name> <path to chart>
7. use kubectl to track pod status
8. make sure that namespaces of tiller/HELM/k8s are correct.
                              export TILLER_NAMESPACE="dev-infra"
                              printenv TILLER_NAMESPACE

common commands:
kubectl cluster-info
helm install cache D:\work\cache-pod --debug --dry-run
helm install cache helmcharts\cache
helm upgrade cache helmcharts\cache
helm delete cache
minikube update-check
helm status cache
kubectl describe pod cache-76557b9865-8g77p
kubectl get all
kubectl get pods
kubectl get pv
kubectl get pvc
kubectl get service
kubectl get ingress
kubectl logs my-pod
kubectl get deployment
kubectl exec -it pod-name printenv | grep DATABASE //prints environment variables and filters.
kubectl rollout restart deployment my-deployment // restarts service.
kubectl scale deploy my-deployment --replicas=0  //turns off service.
kubect edit deployment/pod/svc my-deployment //changes resources properties and spawns new resource with replace.

kubectl config set-context --current --namespace=mynamespace
kubectl get all --all-namespaces | grep myapp //search myapp across all namespaces and all object types(service/deployment/pod)
kubectl get ingress | grep "<service-name>.<namespace>.svc.cluster.local:<service-port>"

helm list --filter 'myapp'
helm list --namespace myapp
helm ls --all myapp
helm del --purge team2-sdi-tester //delete and purge deployment
helm install --name mychart . --namespace mynamespace --debug //install my chart from current folder to soecific namespace.
helm install --name mychart . --namespace mynamespace --debug --dry-run
helm ugrade ${helm-chart-name} --reset-values --install --namespace=dev --set imageTag=${IMAGE_TAG} //updats helm chart with a new image.
helm ugrade ${helm-chart-name} . --namespace=dev --debug --dry-run

to connect to service from outside of the cluster use nodePort service type. --kubectl describe svc serviceName //check the target IP.
