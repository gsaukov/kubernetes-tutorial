NAME: postgres-db
LAST DEPLOYED: Wed Dec 22 14:42:58 2021
NAMESPACE: default
STATUS: pending-install
REVISION: 1
TEST SUITE: None
USER-SUPPLIED VALUES:
  {}

COMPUTED VALUES:
audit:
  clientMinMessages: error
  logConnections: false
  logDisconnections: false
  logHostname: false
  logLinePrefix: ""
  logTimezone: ""
  pgAuditLog: ""
  pgAuditLogCatalog: "off"
common:
  exampleValue: common-chart
  global:
    imagePullSecrets: []
    imageRegistry: ""
    postgresql:
      existingSecret: ""
      postgresqlDatabase: ""
      postgresqlPassword: ""
      postgresqlUsername: ""
      replicationPassword: ""
      servicePort: ""
    storageClass: ""
commonAnnotations: {}
commonLabels: {}
configurationConfigMap: ""
containerSecurityContext:
  enabled: true
  runAsUser: 1001
customLivenessProbe: {}
customReadinessProbe: {}
customStartupProbe: {}
diagnosticMode:
  args:
    - infinity
  command:
    - sleep
  enabled: false
existingSecret: ""
extendedConfConfigMap: ""
extraDeploy: []
extraEnv: []
extraEnvVarsCM: ""
fullnameOverride: ""
global:
  imagePullSecrets: []
  imageRegistry: ""
  postgresql:
    existingSecret: ""
    postgresqlDatabase: ""
    postgresqlPassword: ""
    postgresqlUsername: ""
    replicationPassword: ""
    servicePort: ""
  storageClass: ""
image:
  debug: false
  pullPolicy: IfNotPresent
  pullSecrets: []
  registry: docker.io
  repository: bitnami/postgresql
  tag: 11.14.0-debian-10-r17
initdbPassword: ""
initdbScripts: {}
initdbScriptsConfigMap: ""
initdbScriptsSecret: ""
initdbUser: ""
ldap:
  baseDN: ""
  bind_password: ""
  bindDN: ""
  enabled: false
  port: ""
  prefix: ""
  scheme: ""
  search_attr: ""
  search_filter: ""
  server: ""
  suffix: ""
  tls: ""
  url: ""
lifecycleHooks: {}
livenessProbe:
  enabled: true
  failureThreshold: 6
  initialDelaySeconds: 30
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 5
metrics:
  customMetrics: {}
  enabled: false
  extraEnvVars: []
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/postgres-exporter
    tag: 0.10.0-debian-10-r133
  livenessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  prometheusRule:
    additionalLabels: {}
    enabled: false
    namespace: ""
    rules: []
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  resources: {}
  securityContext:
    enabled: false
    runAsUser: 1001
  service:
    annotations:
      prometheus.io/port: "9187"
      prometheus.io/scrape: "true"
    loadBalancerIP: ""
    type: ClusterIP
  serviceMonitor:
    additionalLabels: {}
    enabled: false
    interval: ""
    metricRelabelings: []
    namespace: ""
    relabelings: []
    scrapeTimeout: ""
nameOverride: ""
networkPolicy:
  allowExternal: true
  enabled: false
  explicitNamespacesSelector: {}
persistence:
  accessModes:
    - ReadWriteOnce
  annotations: {}
  enabled: true
  existingClaim: ""
  mountPath: /bitnami/postgresql
  selector: {}
  size: 8Gi
  storageClass: ""
  subPath: ""
pgHbaConfiguration: ""
postgresqlConfiguration: {}
postgresqlDataDir: /bitnami/postgresql/data
postgresqlDatabase: ""
postgresqlDbUserConnectionLimit: ""
postgresqlExtendedConf: {}
postgresqlInitdbArgs: ""
postgresqlInitdbWalDir: ""
postgresqlMaxConnections: ""
postgresqlPassword: ""
postgresqlPghbaRemoveFilters: ""
postgresqlPostgresConnectionLimit: ""
postgresqlPostgresPassword: ""
postgresqlSharedPreloadLibraries: pgaudit
postgresqlStatementTimeout: ""
postgresqlTcpKeepalivesCount: ""
postgresqlTcpKeepalivesIdle: ""
postgresqlTcpKeepalivesInterval: ""
postgresqlUsername: postgres
primary:
  affinity: {}
  annotations: {}
  extraInitContainers: []
  extraPodSpec: {}
  extraVolumeMounts: []
  extraVolumes: []
  labels: {}
  nodeAffinityPreset:
    key: ""
    type: ""
    values: []
  nodeSelector: {}
  podAffinityPreset: ""
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  priorityClassName: ""
  service:
    clusterIP: ""
    nodePort: ""
    type: ""
  sidecars: []
  tolerations: []
primaryAsStandBy:
  enabled: false
  primaryHost: ""
  primaryPort: ""
psp:
  create: false
rbac:
  create: false
readReplicas:
  affinity: {}
  annotations: {}
  extraInitContainers: []
  extraPodSpec: {}
  extraVolumeMounts: []
  extraVolumes: []
  labels: {}
  nodeAffinityPreset:
    key: ""
    type: ""
    values: []
  nodeSelector: {}
  persistence:
    enabled: true
  podAffinityPreset: ""
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  priorityClassName: ""
  resources: {}
  service:
    clusterIP: ""
    nodePort: ""
    type: ""
  sidecars: []
  tolerations: []
  topologySpreadConstraints: []
readinessProbe:
  enabled: true
  failureThreshold: 6
  initialDelaySeconds: 5
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 5
replication:
  applicationName: my_application
  enabled: false
  numSynchronousReplicas: 0
  password: repl_password
  readReplicas: 1
  singleService: true
  synchronousCommit: "off"
  uniqueServices: false
  user: repl_user
resources:
  requests:
    cpu: 250m
    memory: 256Mi
schedulerName: ""
securityContext:
  enabled: true
  fsGroup: 1001
service:
  annotations: {}
  clusterIP: ""
  externalTrafficPolicy: Cluster
  loadBalancerIP: ""
  loadBalancerSourceRanges: []
  nodePort: ""
  port: 5432
  type: ClusterIP
serviceAccount:
  autoMount: false
  enabled: false
  name: ""
shmVolume:
  chmod:
    enabled: true
  enabled: true
  sizeLimit: ""
startupProbe:
  enabled: false
  failureThreshold: 10
  initialDelaySeconds: 30
  periodSeconds: 15
  successThreshold: 1
  timeoutSeconds: 5
terminationGracePeriodSeconds: ""
tls:
  autoGenerated: false
  certCAFilename: ""
  certFilename: ""
  certKeyFilename: ""
  certificatesSecret: ""
  crlFilename: ""
  enabled: false
  preferServerCiphers: true
updateStrategy:
  type: RollingUpdate
usePasswordFile: false
volumePermissions:
  enabled: false
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/bitnami-shell
    tag: 10-debian-10-r265
  securityContext:
    runAsUser: 0

HOOKS:
MANIFEST:
---
# Source: postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: postgres-db-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.13.14
    app.kubernetes.io/instance: postgres-db
    app.kubernetes.io/managed-by: Helm
  namespace: default
type: Opaque
data:
  postgresql-password: "eE9OdUVKUU9yaA=="
---
# Source: postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: postgres-db-postgresql-headless
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.13.14
    app.kubernetes.io/instance: postgres-db
    app.kubernetes.io/managed-by: Helm
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  namespace: default
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: postgres-db
---
# Source: postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: postgres-db-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.13.14
    app.kubernetes.io/instance: postgres-db
    app.kubernetes.io/managed-by: Helm
  annotations:
  namespace: default
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: postgres-db
    role: primary
---
# Source: postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-db-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.13.14
    app.kubernetes.io/instance: postgres-db
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
  namespace: default
spec:
  serviceName: postgres-db-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: postgres-db
      role: primary
  template:
    metadata:
      name: postgres-db-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-10.13.14
        app.kubernetes.io/instance: postgres-db
        app.kubernetes.io/managed-by: Helm
        role: primary
        app.kubernetes.io/component: primary
    spec:
      affinity:
        podAffinity:

        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: postgres-db
                    app.kubernetes.io/component: primary
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:

      securityContext:
        fsGroup: 1001
      automountServiceAccountToken: false
      containers:
        - name: postgres-db-postgresql
          image: docker.io/bitnami/postgresql:11.14.0-debian-10-r17
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-db-postgresql
                  key: postgresql-password
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath:
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
